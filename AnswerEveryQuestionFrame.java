/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package answereveryquestion;

import static answereveryquestion.AnswerEveryQuestion.r;
import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import static java.util.stream.Collectors.toMap;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;

/**
 *
 * @author asus
 */
public class AnswerEveryQuestionFrame extends javax.swing.JFrame {

    /**
     * Creates new form AnswerEveryQuestionFrame
     */
    private static ChromeOptions option;
    private static WebDriver driver;


    
    public AnswerEveryQuestionFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtQuestion = new javax.swing.JTextField();
        btnRun = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        btnExit = new javax.swing.JButton();
        btnScan = new javax.swing.JButton();
        btnGetResult = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRun.setText("RUN");
        btnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRunMouseClicked(evt);
            }
        });
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        txtContent.setColumns(20);
        txtContent.setRows(5);
        txtContent.setWrapStyleWord(true);
        txtContent.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(txtContent);

        btnExit.setText("EXIT");
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
        });

        btnScan.setText("SCAN");
        btnScan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnScanMouseClicked(evt);
            }
        });

        btnGetResult.setText("GET RESULT");
        btnGetResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGetResultMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRun, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnScan, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGetResult, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(txtQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnScan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRun, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnGetResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRunActionPerformed

    private void btnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRunMouseClicked
        // TODO add your handling code here:
        String question = txtQuestion.getText();
        StringBuilder sbContent = new StringBuilder();
        
        try {
            connectWebDriver(question, sbContent);
        } catch (InterruptedException ex) {
            Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String content = sbContent.toString();
        
        Map<String, Integer> hashWord = new LinkedHashMap();
        hashWord = executeContent(content);
        
        txtContent.setText("");
        Set set = hashWord.entrySet();
        Iterator iterator = set.iterator();
        for (int i = 0; i < 10; i++) {
            Map.Entry mentry = (Map.Entry) iterator.next();
            String key = (String) mentry.getKey();
            int value = (int) mentry.getValue();
            if(!question.toLowerCase().contains(key.toLowerCase()) && key.matches("[a-zA-Z0-9]+") && !key.equals("thg")
                    ){
                txtContent.append(key + " : " + value + " times\n");
            }
            else{
                i--;
            }
        }         
    }//GEN-LAST:event_btnRunMouseClicked

    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseClicked
        // TODO add your handling code here:        
        driver.quit();
        System.exit(0);
    }//GEN-LAST:event_btnExitMouseClicked

    private void btnScanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnScanMouseClicked
        
        
        
        try {
            scanText();
        } catch (IOException ex) {
            Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (AWTException ex) {
            Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedFlavorException ex) {
            Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }       
        

    }//GEN-LAST:event_btnScanMouseClicked

    private void btnGetResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGetResultMouseClicked
        try {
            // TODO add your handling code here:
            String data = (String) Toolkit.getDefaultToolkit()        
                    .getSystemClipboard().getData(DataFlavor.stringFlavor);
            txtQuestion.setText("");
            txtQuestion.setText(data);
            
        } catch (UnsupportedFlavorException ex) {
            Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGetResultMouseClicked

    /**
     * @param args the command line arguments
     */
    public HashMap executeContent(String content) {
        String[] listWord = content.split("[ ,]");
        Map<String, Integer> hashWord = new HashMap();
        for (String word : listWord) {
            int num = 1;
            if (hashWord.get(word) != null) {
                num = (int) hashWord.get(word) + 1;
                hashWord.remove(word);
            }
            hashWord.put(word, num);
        }
        Map<String, Integer> sorted = hashWord.entrySet().stream()
        .sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
        .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new));

        return (HashMap) sorted;
    }
    public void connectWebDriver(String question, StringBuilder sbContent) throws InterruptedException {

        driver.findElement(By.id("lst-ib")).clear();
        driver.findElement(By.id("lst-ib")).sendKeys(question + Keys.ENTER);
        
        List<WebElement> list = driver.findElements(By.className("r"));
        for (WebElement we : list) {
            sbContent.append(we.getText() + "\n");
        }

        List<WebElement> list2 = driver.findElements(By.className("st"));
        for (WebElement we : list2) {
            sbContent.append(we.getText() + "\n");
        }
    }

    public static void scanText() throws IOException, AWTException, UnsupportedFlavorException {
        Runtime.getRuntime().exec(".\\Capture2Text\\Capture2Text.exe");
        //r = new Robot();
        //r.mouseMove(400, 400);
        //pressWindowsQ();
        //r.mouseMove(600, 600);
        //r.mousePress(MouseEvent.BUTTON1_MASK);
        //r.mouseRelease(MouseEvent.BUTTON1_MASK);
        //pressEnter();
//        String data = (String) Toolkit.getDefaultToolkit()
//                .getSystemClipboard().getData(DataFlavor.stringFlavor);
        //Stop Capture2Text.exe
        //Runtime.getRuntime().exec("taskkill /F /IM Capture2Text.exe");        
        //return data;
    }

    static Robot r;

    public static void pressWindowsQ() {
        r.keyPress(KeyEvent.VK_WINDOWS);
        r.keyPress(KeyEvent.VK_Q);
        r.keyRelease(KeyEvent.VK_Q);
        r.keyRelease(KeyEvent.VK_WINDOWS);
    }

    public static void pressEnter() {
        r.keyPress(KeyEvent.VK_ENTER);
        r.keyRelease(KeyEvent.VK_ENTER);

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnswerEveryQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        System.setProperty("webdriver.chrome.driver", "chromedriver.exe");
        //Open browser
        option = new ChromeOptions();
        //Not show noti
        option.addArguments("--disable-notifications");
        //Not show browser
        //option.addArguments("headless");
        driver = new ChromeDriver(option);
        //maximize screen
        driver.manage().window().maximize();
        //after 1 minutes, if page is not load, -> exception
        driver.manage().timeouts().pageLoadTimeout(1, TimeUnit.MINUTES);
        //tat ca lenh findElement, neu 2 day ko return gi, ->exception
        driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);

        driver.get("https://www.google.com/");
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnswerEveryQuestionFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGetResult;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnScan;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtContent;
    private javax.swing.JTextField txtQuestion;
    // End of variables declaration//GEN-END:variables
}
